services:
  # Main face recognition application
  face-recognition-app:
    build:
      context: .
      dockerfile: Dockerfile
    # Remove port binding to allow scaling - nginx will handle traffic
    expose:
      - "5000"
    volumes:
      # Persistent storage for known faces and attendance data
      - known_faces_data:/app/backend/known_faces
      - attendance_data:/app/api
      # Mount dlib models (optional - they're downloaded in Dockerfile)
      - ./backend/resorces:/app/backend/resorces:ro
    environment:
      - FLASK_ENV=production
      - FLASK_APP=api/app.py
      - PYTHONUNBUFFERED=1
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - face-recognition-network

  # Development service with direct port access (for single instance)
  face-recognition-app-dev:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    volumes:
      - known_faces_data:/app/backend/known_faces
      - attendance_data:/app/api
      - ./backend/resorces:/app/backend/resorces:ro
    environment:
      - FLASK_ENV=development
      - FLASK_APP=api/app.py
      - PYTHONUNBUFFERED=1
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - face-recognition-network
    profiles:
      - development

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - face-recognition-app
    restart: unless-stopped
    networks:
      - face-recognition-network
    profiles:
      - production

  # Redis for caching (optional enhancement)
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - face-recognition-network
    profiles:
      - production

  # Prometheus monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    restart: unless-stopped
    networks:
      - face-recognition-network
    profiles:
      - monitoring

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: unless-stopped
    networks:
      - face-recognition-network
    profiles:
      - monitoring

volumes:
  known_faces_data:
    driver: local
  attendance_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  face-recognition-network:
    driver: bridge
